#!/usr/bin/env ruby

require 'thor'
require 'yaml'
require 'midea_air_condition'

class MideaCLI < Thor
  CONFIG_PATH = File.expand_path('~/.midea/config')

  desc 'configure', 'Configure client'
  def configure
    credentials = {}
    credentials['email'] = ask("Email:")
    credentials['password'] = ask("Password:")
    credentials['app_key'] = ask("App key:")
    config_dir = File.dirname(CONFIG_PATH)
    Dir.mkdir(config_dir) unless Dir.exist?(config_dir)
    File.write(CONFIG_PATH, credentials.to_yaml)
  end

  desc 'list', 'List devices'
  def list 
    devices = client.appliance_list
    head = [
      { name: 'ID',     id: 'id'           },
      { name: 'Name',   id: 'name'         },
      { name: 'Type',   id: 'type'         },
      { name: 'Online', id: 'onlineStatus' },
      { name: 'Active', id: 'activeStatus' },
    ]
    print_table(devices, head)
  end

  desc 'get ID', 'Gets device\'s information'
  def get id
    command = MideaAirCondition::Command::RequestStatus.new
    device = send_command(id, command)
    puts "Device is turned #{(device.power_status ? 'on' : 'off')}."
    puts "Target temperature: #{device.temperature} celsius"
    puts "Indoor temperature: #{device.indoor_temperature} celsius"
    puts "Outdoor temperature: #{device.outdoor_temperature} celsius"
    puts "Mode: #{device.mode_human}"
    puts "Fan speed: #{device.fan_speed}"
    puts "TimerOn is #{(device.on_timer[:status] ? '' : 'not')} active."
    puts "  at:  #{device.on_timer_human}" if device.on_timer[:status]
    puts "TimerOff is #{(device.off_timer[:status] ? '' : 'not')} active."
    puts "  at: #{device.off_timer_human}" if device.off_timer[:status]
    puts "Eco mode is #{(device.eco ? 'on' : 'off')}."
  end

  desc 'set ID', 'Sets device\'s power, temperature and fan speed'
  method_option :power, required: false, type: :string, aliases: "-p", desc: "Power"
  method_option :target_temperature, required: false, type: :numeric, aliases: "-t", desc: "Target temperature"
  method_option :fan_speed, required: false, type: :numeric, aliases: "-f", desc: "Fan speed"
  def set id
    command = MideaAirCondition::Command::Set.new
    command.turn_off if options[:power] == 'off'
    command.turn_on if options[:power] == 'on'
    command.temperature(options[:target_temperature]) if options[:target_temperature]
    command.fan_speed(options[:fan_speed]) if options[:fan_speed]
    send_command(id, command)
  end


  no_commands do
    def credentials
      return @credentials if @credentials
      env_variables = ['MIDEA_AC_EMAIL', 'MIDEA_AC_PASSWORD', 'MIDEA_AC_APP_KEY']
      env_prefix = 'MIDEA_AC_'
      if env_variables.all? {|k| ENV.key? k}
        @credentials = Hash[
          ENV.select{ |k, v| env_variables.include?(k) }
            .map { |k, v| [k.gsub(env_prefix, '').downcase, v] }
        ]
      elsif File.file?(CONFIG_PATH)
        @credentials = YAML.load_file(CONFIG_PATH)
      else
        raise Thor::Error, 'No credentials found'
      end
    end

    def client
      return @client if @client
      @client = MideaAirCondition::Client.new(
        credentials['email'],
        credentials['password'],
        app_key: credentials['app_key']
      )
      @client.login
      @client
    end

    def send_command id, command
      builder = client.new_packet_builder
      builder.add_command(command)
      begin 
        response = client.appliance_transparent_send(
          id,
          builder.finalize
        )
      rescue RuntimeError => e
        if e.message == 'the appliance is off line.'
          raise Thor::Error, 'The device is offline.'
        else 
          raise e
        end
      end
  
      MideaAirCondition::Device.new(response)
    end

    def print_table(values, head)
      head.each do |title|
        title[:lenght] = (values.map{|value| value[title[:id]].to_s.length} + [title[:name].length]).max
      end
      print_line(head)
      print_head(head)
      print_line(head)
      values.each{|row| print_row(head, row)}
      print_line(head)
      
    end

    def print_line(head)
      puts '-' * (head.map{|e| e[:lenght] + 3}.reduce(&:+) + 1)
    end

    def print_head(head)
      columns = head.map{|e| e[:name].ljust(e[:lenght], ' ')}
      puts '| ' + columns.join(' | ') + ' |'
    end

    def print_row(head, row)
      columns = head.map{|e| row[e[:id]].to_s.ljust(e[:lenght], ' ')}
      puts '| ' + columns.join(' | ') + ' |'
    end
  end
end

MideaCLI.start
